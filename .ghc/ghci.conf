
import Control.Monad.State as State

:{

stringToIO :: String -> IO String
stringToIO = pure

concatIOStrWithStr :: IO String -> String -> IO String
concatIOStrWithStr ioStr str = ioStr >>= (\ unwrappedStr -> stringToIO (unwrappedStr ++ str) ) 

data Color = Black | Red | Green | Yellow | Blue | Purple | Cyan | White | Reset
    deriving ( Eq, Show )

instance Enum Color where
    -- toEnum :: Int -> Color
    toEnum n
        | n == 30 || n == 0 = Black
        | n == 31 || n == 1 = Red
        | n == 32 || n == 2 = Green
        | n == 33 || n == 3 = Yellow
        | n == 34 || n == 4 = Blue
        | n == 35 || n == 5 = Purple
        | n == 36 || n == 6 = Cyan
        | n == 37 || n == 7 = White
        | True    || n == -1 = Reset


    -- fromEnum :: Color -> Int
    fromEnum col
        | col == Black = 30
        | col == Red = 31
        | col == Green = 32
        | col == Yellow = 33
        | col == Blue = 34
        | col == Purple = 35
        | col == Cyan = 36
        | col == White = 37
        | True = -1

colorCode :: Color -> String
colorCode col =
    if col == Reset then "0"
    else show $ fromEnum col

colorStr :: Color -> String -> String
colorStr col str = "\ESC[0;" ++ colorCode col ++  "m\STX" ++ str ++ "\ESC[m\STX"

showAviableColors :: IO ()
showAviableColors = putStrLn (
    colorStr Black "Black" ++ " | " ++
    colorStr Red "Red" ++ " | " ++
    colorStr Green "Green" ++ " | " ++
    colorStr Yellow "Yellow" ++ " | " ++
    colorStr Blue "Blue" ++ " |  " ++
    colorStr Purple "Purple" ++ " | " ++ 
    colorStr Cyan "Cyan" ++ " | " ++
    colorStr White "White" ++
    " | Reset")

isKnownOperator :: String -> Bool
isKnownOperator str = case str of
    "=" -> True
    "==" -> True
    "/=" -> True
    "*" -> True
    "/" -> True
    "+" -> True
    "-" -> True
    "." -> True
    ">>=" -> True           
    "=<<" -> True
    ">>" -> True
    "<<" -> True
    "<=" -> True
    ">=" -> True
    "(" -> True
    ")" -> True
    "$" -> True
    "<$>" -> True
    "<*>" -> True
    "<>" -> True
    "`" -> True
    "," -> True
    _ -> False


chIsInteger :: Char -> Bool
chIsInteger ch =
    ch == '1' ||
    ch == '2' ||
    ch == '3' ||
    ch == '4' ||
    ch == '5' ||
    ch == '6' ||
    ch == '7' ||
    ch == '8' ||
    ch == '9' ||
    ch == '0'

--
chIsOperator :: Char -> Bool
chIsOperator ch =
    ch == '=' ||
    ch == '/' ||
    ch == '+' ||
    ch == '-' ||
    ch == '.' ||
    ch == ',' ||
    ch == '<' ||
    ch == '>' ||
    ch == '!' ||
    ch == '|' ||
    ch == '\\' ||
    ch == '$' ||
    ch == '[' ||
    ch == ']' ||
    ch == '(' ||
    ch == ')' ||
    ch == '{' ||
    ch == '}' ||
    ch == '&'
--}

_handleCharColor :: Char -> String
_handleCharColor ch =
    if chIsInteger ch then colorStr Green [ch]
    else if chIsOperator ch then colorStr Blue [ch ]
    else [ch]

handleWordColor :: String -> String
handleWordColor =
    foldl (\ accum ch -> accum ++ _handleCharColor ch ) ""

type HandleColorState = (String, Bool)

handleColors :: String -> State HandleColorState String
handleColors [] = do
    (result, _shouldBeString) <- get
    return result

handleColors (ch:restStr) = do
    (fstPartialResult, fstShouldBeString) <- get
    
    if ch == '"' then do put ( fstPartialResult ++ colorStr Yellow "\"", not fstShouldBeString )
    else do
        
        ( partialResult, shouldBeString ) <- get
        
        if shouldBeString then do
            put ( partialResult ++ ( colorStr Yellow [ch] )  , True )
        else do
            put ( partialResult ++  _handleCharColor ch  , False )
    
    handleColors restStr

myPrint :: Show a => a -> IO ()
myPrint showable = do
--     forM_ (words $ show showable) putStrLn -- Debug
     putStrLn $ "   " ++ evalState ( handleColors $ show showable ) ("", False)

:}


:set prompt "\ESC[0;34m\STX%s\n\ESC[1;31m\STXÎ»> \ESC[m\STX"
:set prompt-cont "\ESC[1;31m\STX  > \ESC[m\STX"
:set -interactive-print=myPrint

